#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

on:
  pull_request:
    branches:
      - main
    types:
      - closed

  issues:
    types:
      - closed

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  assign-issue-milestone:
    if: github.repository == 'apache/camel-quarkus' &&
        github.event_name == 'pull_request' &&
        github.event.pull_request.merged
    runs-on: ubuntu-latest
    concurrency:
      group: assign-issue-milestone-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Assign Closed Issues To Latest Milestone
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumberFromCommitCommentRegex = new RegExp(`.*(?:fix(?:e[sd])?|(?:(?:resolve|close)[sd]?)):?\\s(?:https?:\\/\\/github\\.com\\/${context.repo.owner}\\/${context.repo.repo}\\/issues\\/|#)(\\d+)`, 'igm');
            const prNumber = context.payload.number;
            const prIssueReferencesQuery = `{
              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                pullRequest(number: ${prNumber}) {
                  commits(last: 50) {
                    nodes {
                      commit {
                        message
                      }
                    }
                  }
                  closingIssuesReferences(last: 50) {
                    nodes {
                      number
                    }
                  }
                }
              }
            }`;

            const issueNumbers = new Set();

            prIssueReferences = await github.graphql(prIssueReferencesQuery);
            if (prIssueReferences) {
              // Parse issue number references from commit comments
              if (prIssueReferences.repository.pullRequest.commits) {
                prIssueReferences.repository.pullRequest.commits.nodes.forEach(node => {
                  for (const match of node.commit.message.matchAll(issueNumberFromCommitCommentRegex)) {
                    let issueNumber = parseInt(match[1]);
                    if (!isNaN(issueNumber)) {
                      issueNumbers.add(issueNumber);
                    }
                  }
                });
              }

              // Get any issue references GitHub associated with the PR
              if (prIssueReferences.repository.pullRequest.closingIssuesReferences) {
                prIssueReferences.repository.pullRequest.closingIssuesReferences.nodes.forEach(node => {
                  if (node.number) {
                    issueNumbers.add(node.number);
                  }
                });
              }
            }

            // No issues associated with the merged PR so we can exit
            if (issueNumbers.size === 0) {
              return;
            }

            // Get open milestones
            milestoneResults = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sort: "title",
              direction: "desc",
            });

            // Assign the latest milestone to issues associated with the merged PR
            if (milestoneResults && milestoneResults.data.length > 0) {
              const milestones = milestoneResults.data.filter(data => data.title.match("^[0-9].[0-9].[0-9].*"));
              if (milestones && milestones.length > 0) {
                const latestMilestone = milestones[0].number;
                issueNumbers.forEach(issueNumber => {
                  github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    milestone: latestMilestone,
                  });
                });
              }
            }

  assign-wont-fix-issue-milestone:
    if: github.repository == 'apache/camel-quarkus' &&
        github.event_name == 'issues' &&
        github.event.issue.milestone.number != 4 && (contains(github.event.issue.labels.*.name, 'wontfix') || github.event.issue.state_reason == 'not_planned')
    runs-on: ubuntu-latest
    concurrency:
      group: assign-wont-fix-issue-milestone-${{ github.event.issue.number }}
      cancel-in-progress: true
    steps:
      - name: Assign Closed Issue To Wont Fix Milestone
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              // https://github.com/apache/camel-quarkus/milestone/4
              milestone: 4,
            });
