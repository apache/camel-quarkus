#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

openapi: "3.0.3"
info:
  title: Camel API Example
  version: 1.0.0
  description: >
    This is an example API.

servers:
  - url: http://ipsum.com/api
    description: Development environment.
  - url: http://lorem.com/api
    description: Production environment.

paths:
  /v1/camel:
    get:
      operationId: findCamels
      summary: Find camels
      description: Search for camels.
      parameters:
        - in: query
          name: name
          description: A camel name.
          required: true
          schema:
            type: string
            example: "Glenn"
      responses:
        "200":
          description: Matching camels are returned.
          content:
            application/json:
              schema:
                type: object
                required:
                  - camelList
                properties:
                  camelList:
                    description: List containing matching camels.
                    type: array
                    items:
                      $ref: "#/components/schemas/Camel"
        "400":
          "description": "Invalid input."

components:
  schemas:
    Camel:
      description: A representation of a camel.
      type: object
      required:
        - id
        - gender
        - name
      properties:
        id:
          $ref: "#/components/schemas/Id"
        gender:
          description: >
            Gender:
              - FEMALE: Female.
              - MALE: Male.
          type: string
          enum: [ FEMALE, MALE ]
          example: MALE
        birthDate:
          description: The date of birth.
          type: string
          format: date
          example: 2024-10-28Z
        name:
          description: Name.
          type: string
          example: Glenn
        rating:
          description: Rating.
          type: number
          multipleOf: 0.01
          example: 3.14

    Id:
      description: A camel id.
      type: string
      pattern: "^[A-Z]{3}-[0-9]{2}$"
      example: ABC-42
